% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pnmf.R
\name{PNMFO}
\alias{PNMFO}
\alias{PNMFO2}
\title{Projective orthonormal nonnegative matrix factorization based on euclidean distance.}
\usage{
PNMFO(X, nmfMod, tol = 1e-05, maxIter = 5000, verbose = FALSE)

PNMFO2(X, nmfMod, tol = 1e-05, maxIter = 5000, verbose = FALSE)
}
\arguments{
\item{X}{Input data matrix}

\item{nmfMod}{NMF model from the NMF package}

\item{tol}{tolerance for stopping criteria}

\item{maxIter}{Maximum number of iterations}

\item{verbose}{Print status messages}
}
\value{
Fitted NMF model, as defined in NMF package.
}
\description{
Projective orthonormal nonnegative matrix factorization based on euclidean distance.
}
\details{
Implementation of "Linear and Nonlinear Projective Nonnegative Matrix Factorization",
Z. Yang and E. Oja, IEEE Transactions on Neural Networks. Derived from
matlab code by Z. Yang, https://sites.google.com/site/zhirongyangcs/pnmf.

The PNMFO2 version uses a different ordering of matrix operations that is slower, as
more happens in the loop, but reduces the maximum matrix size. No need for a
features x features matrix
}
\section{Functions}{
\itemize{
\item \code{PNMFO2}: Projective orthonormal nonnegative matrix factorization based on euclidean distance.
}}

\examples{
library(NMF)
setNMFMethod("PNMFO", pNMF::PNMFO)
mkD <- function(NOISE=TRUE) {
  n <- 1000 # rows
  counts <- c(30, 10, 20, 10, 15, 15) # samples
  syntheticNMF(n=n, r=counts, offset = NULL, noise = NOISE,
               factors = FALSE, seed = 99)
}
k<-mkD()
estim <- nmf(k, 6, method="PNMF", nrun=1)
\dontrun{
V.random <- randomize(k)
estim.r2 <- nmf(k, 2:20, method="PNMF", nrun=30)
estim.r2.random <- nmf(V.random, 2:20,  method="PNMF", nrun=30)
}
}
